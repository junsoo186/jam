<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jam.repository.interfaces.BookRepository">

	<insert id="insertBook" parameterType="com.jam.dto.BookDTO"
		useGeneratedKeys="true" keyProperty="bookId">
		INSERT INTO book_tb (user_id,
		title, author_comment, author, serial_day, introduction,
		category_id,
		genre_id, age, book_cover_image)
		VALUES (#{userId}, #{title}, #{authorComment},
		#{author}, #{serialDay},
		#{introduction}, #{categoryId}, #{genreId},
		#{age}, #{bookCoverImage})
	</insert>
	
	
	<insert id="insertBookId" parameterType="com.jam.repository.model.Book"
        useGeneratedKeys="true" keyProperty="bookId">
	
	</insert>
	
	
	<!--  카테고리,장르,요일 별 정렬 -->
	
	<select id="findSerialDay" resultType="com.jam.repository.model.Book">
    SELECT DISTINCT serial_day
    FROM book_tb
    ORDER BY 
        CASE serial_day
            WHEN '월요일' THEN 1
            WHEN '화요일' THEN 2
            WHEN '수요일' THEN 3
            WHEN '목요일' THEN 4
            WHEN '금요일' THEN 5
            WHEN '토요일' THEN 6
            WHEN '일요일' THEN 7
            ELSE 8 -- 잘못된 요일 또는 기타 값을 처리하는 경우
        END;

	</select>
	
	
	<select id="AllBookSerial" resultType="com.jam.repository.model.Book">
	select 
	b.book_id,
	b.user_id,
	b.author,
	b.title,
	b.age,
	b.book_cover_image,
	b.likes,
	b.age,
	b.serial_day,sum(vr.views) as views,
	ROUND(avg(vr.rating),2) as rating
	 from book_tb as b
	 left join
	 book_views_rating_tb vr on  vr.book_id = b.book_id
	group by  b.book_id,b.user_id,b.author,b.title,b.book_cover_image,b.likes,b.age,b.serial_day,b.age
	<choose>
	        <when test="filter == 'views'">
	            ORDER BY views
	        </when>
	        <when test="filter == 'likes'">
	            ORDER BY b.likes
	        </when>
	        <otherwise>
	            ORDER BY b.book_id  <!-- 기본 정렬 -->
	        </otherwise>
	    </choose>
	    <choose>
	        <when test="order == 'ASC'">
	            ASC
	        </when>
	        <when test="order == 'DESC'">
	            DESC
	        </when>
	    </choose>
	</select>

	<select id="AllBookList"
		resultType="com.jam.repository.model.Book">
		SELECT
		b.book_id,
		b.title,
		b.author,
		b.likes,
		b.category_id,
		b.genre_id,
		b.book_cover_image,
		GROUP_CONCAT(DISTINCT t.tag_name ORDER BY t.tag_name ASC) AS tagNames
		FROM
		book_tb b
		LEFT JOIN book_tag_tb bt ON b.book_id = bt.book_id
		LEFT
		JOIN tag_tb t ON bt.tag_id = t.tag_id
		GROUP BY
		b.book_id
		ORDER BY
		b.title
		ASC
	</select>
	
	<select id="AllBookListCategoryOrderBy" resultType="com.jam.repository.model.Book">
	    SELECT
	        b.book_id,
	        b.title,
	        b.author,
	        b.age,
	        b.likes,
	        sum(vr.views) as views,
	        b.category_id,
	        b.genre_id,
	        b.book_cover_image,
	        GROUP_CONCAT(DISTINCT t.tag_name ORDER BY t.tag_name ASC) AS tagNames
	    FROM
	        book_tb b
	    LEFT JOIN
	        book_tag_tb bt ON b.book_id = bt.book_id
	    LEFT JOIN
	        tag_tb t ON bt.tag_id = t.tag_id
	    left join
           book_views_rating_tb vr on  vr.book_id = b.book_id
	    WHERE
	        b.category_id = #{categoryId}  <!-- 파라미터로 카테고리 필터링 -->
	    GROUP BY
	        b.book_id, b.title, b.author, b.likes, b.category_id, b.genre_id, b.book_cover_image,b.age
	    <choose>
	        <when test="filter == 'views'">
	            ORDER BY views
	        </when>
	        <when test="filter == 'likes'">
	            ORDER BY b.likes
	        </when>
	        <otherwise>
	            ORDER BY b.book_id  <!-- 기본 정렬 -->
	        </otherwise>
	    </choose>
	    <choose>
	        <when test="order == 'ASC'">
	            ASC
	        </when>
	        <when test="order == 'DESC'">
	            DESC
	        </when>
	    </choose>
	</select>


	<select id="AllBookListGenreOrderBy" resultType="com.jam.repository.model.Book">
	    SELECT
	        b.book_id,
	        b.title,
	        b.author,
	        b.age,
	        b.likes,
	        sum(vr.views) as views,
	        b.category_id,
	        b.genre_id,
	        b.book_cover_image,
	        GROUP_CONCAT(DISTINCT t.tag_name ORDER BY t.tag_name ASC) AS tagNames
	    FROM
	        book_tb b
	    LEFT JOIN
	        book_tag_tb bt ON b.book_id = bt.book_id
	    LEFT JOIN
	        tag_tb t ON bt.tag_id = t.tag_id
      	left join
        	book_views_rating_tb vr on  vr.book_id = b.book_id
	    WHERE
	        b.genre_id = #{genreId} 
	    GROUP BY
	        b.book_id, b.title, b.author, b.likes, b.category_id, b.genre_id, b.book_cover_image,b.age
	    <choose>
	        <when test="filter == 'views'">
	            ORDER BY views
	        </when>
	        <when test="filter == 'likes'">
	            ORDER BY b.likes
	        </when>
	        <otherwise>
	            ORDER BY b.book_id  <!-- 기본 정렬 -->
	        </otherwise>
	    </choose>
	    <choose>
	        <when test="order == 'ASC'">
	            ASC
	        </when>
	        <when test="order == 'DESC'">
	            DESC
	        </when>
	    </choose>
	</select>
	
	<select id="findViews" resultType="com.jam.repository.model.Book">
	 SELECT b.book_id,
            b.title,
            b.age,
            b.author,
            b.likes,
            b.category_id,
            b.genre_id,
            b.book_cover_image,
            b.created_at,
            sum(vr.views) as views
   	 FROM book_tb as b
     LEFT JOIN   
     	book_views_rating_tb as vr on vr.book_id=b.book_id
     WHERE 
		view_year = YEAR(CURRENT_DATE)
	    AND view_month = MONTH(CURRENT_DATE)
	    AND view_day= day(CURRENT_DATE)
	     group by b.book_id,b.created_at,
	            b.title, b.author, b.likes,
	            b.category_id, b.genre_id, b.book_cover_image,b.age
	    ORDER BY views
	    <if test="order == 'ASC'">
	        ASC
	    </if>
	    <if test="order == 'DESC'">
	        DESC
	    </if>
	</select>
	
	
	
	<!-- 정렬 -->

	<select id="findAllBookListByUserId"
		resultType="com.jam.repository.model.Book">
		SELECT
		b.book_id,
		b.user_id,
		b.title,
		b.author,	
		b.likes,
		b.author_comment,
		b.book_cover_image,
		GROUP_CONCAT(DISTINCT t.tag_name ORDER BY t.tag_name ASC) AS tagNames
		FROM
		book_tb b
		LEFT JOIN book_tag_tb bt ON b.book_id = bt.book_id
		LEFT
		JOIN tag_tb t ON bt.tag_id = t.tag_id
		WHERE
		b.user_id = #{userId}
		GROUP
		BY
		b.book_id
		ORDER BY
		b.title ASC
	</select>

	<select id="detailBookByBookId"
		resultType="com.jam.repository.model.Book">
		SELECT
		b.book_id,
		b.user_id,
		b.title,
		b.author,
		b.author_comment,
		c.category_name, 
		g.genre_name, 
		b.age,
		b.likes,
		b.serial_day,
		b.introduction,
		b.created_at,
		b.book_cover_image,
		GROUP_CONCAT(DISTINCT t.tag_name ORDER BY t.tag_name ASC) AS tagNames
		FROM
		book_tb b
		LEFT JOIN
		category_tb c ON b.category_id = c.category_id 
		LEFT JOIN
		genre_tb g ON b.genre_id = g.genre_id 
		LEFT JOIN
		book_tag_tb bt ON b.book_id = bt.book_id
		LEFT JOIN
		tag_tb t ON bt.tag_id = t.tag_id
		WHERE
		b.book_id = #{bookId}
		GROUP BY
		b.book_id,
		c.category_name, 
		g.genre_name 
		ORDER BY
		b.title ASC;
	</select>

	<!--  views 트랜잭션 -->

	<select id="checkUserViewExists" resultType="int">
    SELECT COUNT(*)
    FROM book_views_rating_tb
    WHERE user_id = #{userId}
    AND book_id = #{bookId}
    AND view_year = YEAR(CURRENT_DATE)
    AND view_month = MONTH(CURRENT_DATE)
    AND view_day = DAY(CURRENT_DATE)
	</select>
	
	
	<!--  update 로 +1 증가시키는건데 아직 사용안함 -->
	<update id="updateViews">	
	UPDATE book_views_rating_tb 
	SET views = views + 1
	WHERE book_id = #{bookId};
	</update>

	<insert id="insertUserViewRecord">
    INSERT INTO book_views_rating_tb (user_id, book_id, view_year, view_month, view_day, views)
    VALUES (#{userId}, #{bookId}, YEAR(CURRENT_DATE), MONTH(CURRENT_DATE), DAY(CURRENT_DATE), 1 })
	</insert>

	<!-- 끝 -->
	
	
	
	
	
	

	<update id="updateBook">
		UPDATE book_tb
		SET
		title = #{title},
		author_comment =
		#{authorComment},
		introduction = #{introduction},
		serial_day =
		#{serialDay},
		age = #{age},
		book_cover_image = #{bookCoverImage}
		WHERE
		book_id = #{bookId}
	</update>
	
	
	

	<update id="bookViewCountUp">
		update book_tb set
		SET view = view + 1
		where book_id =
		#{bookId}
	</update>

	<delete id="deleteBook">
		delete book_tb where book_id = #{bookId}
	</delete>
	
	<select id="findAllCategory"
	resultType="com.jam.repository.model.Category">
		select * from category_tb;
	</select>
	<select id="findAllGenre"
	resultType="com.jam.repository.model.Genre">
		select * from genre_tb;
	</select>
</mapper>