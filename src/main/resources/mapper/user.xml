<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jam.repository.interfaces.UserRepository">
	<!--  유저가 회원가입 시 필요한 닉네임, 이메일, 패스워드, 이미지의 값을 넣는다. -->
	<insert id="insert">
		insert into user_tb (nick_name, email, password,
		profile_img)
		values(#{nickName}, #{email}, #{password}, #{profileImg});
	</insert>

	<!-- 유저의 상세 데이터(user_de_tb)를 추가하여 user_id를 기반으로 유저의 포인트, 이름, 생일, 주소 테이블 연결 -->
	<insert id="insertbyUserTb">
		insert into user_de_tb (user_id)
		values(#{userId})
	</insert>

	<select id="findEmail"
		resultType="com.jam.repository.model.User">
		select *
		from user_tb as u
		join user_de_tb as d on u.user_id
		= d.user_id
		where email = #{email};
	</select>
	
	<select id="findUserId"
		resultType="com.jam.repository.model.User">
		select *
		from user_tb as u
		join user_de_tb as d
		on u.user_id = d.user_id
		where u.user_id = #{userId};
	</select>

	<select id="findByUserEmail" resultType="int">
		SELECT COUNT(*) FROM
		user_tb WHERE email = #{email};
	</select>

	<select id="findByEmail"
		resultType="com.jam.repository.model.User">
		SELECT *
		FROM user_tb
		WHERE email = #{email}
	</select>

	<select id="fineByUserNickName" resultType="int">
		SELECT COUNT(*) FROM
		user_tb WHERE nick_name = #{nickName};
	</select>

	<select id="findByNickName"
		resultType="com.jam.repository.model.User">
		SELECT *
		FROM user_tb
		WHERE nick_name = #{nickName};
	</select>

	<update id="updatePasswordByEmail">
		update user_tb
		set password = #{password}
		where email =
#{email};
	</update>

	<update id="updateProfileByUserTb">

		UPDATE user_tb
		SET nick_name = #{nickName},
		profile_img = #{profileImg},
		phone_number = #{phoneNumber} <!-- 폰 번호 없어서  추가해봄 -->
		WHERE email = #{email}

	</update>

	<update id="updateProfileByUserDeTb">
		UPDATE user_de_tb
		SET name = #{name},
		address = #{address},
		birth_date = #{birthDate}
		

	</update>

	<select id="InformationUpdate">

		select *
		from user_tb as u
		join user_de_tb as d on u.user_id = d.user_id
		where
		email = #{email};

	</select>

	<select id="emailsearch"
		resultType="com.jam.repository.model.User">
		select *
		from user_tb
		where email = #{email};
	</select>
	
	
	<select id="selectUserPoint">
		SELECT point FROM user_de_tb WHERE user_id = #{userId}
	</select>
	
	<select id="selectUserInfo">
		select *
		from user_tb
		where user_id = #{userId}
	</select>
		
	<insert id="insertPoint">
   	 INSERT INTO account_history_tb (user_id, deposit, point, after_balance, payment_key, event, method )
    VALUES (#{userId}, #{deposit}, #{point}, #{afterBalance}, #{paymentKey}, #{event}, #{method});
	</insert>
	
	<update id="updatePoint">
	UPDATE account_history_tb
	SET deposit = #{deposit}, 
    point = #{point}, 
    after_balance = #{afterBalance}, 
    user_id = #{userId},
    refund_reason = #{refundReason}
	WHERE payment_key = #{paymentKey}
	</update>
	
	<update id = "updaterefundReason">
		UPDATE account_history_tb
		SET refund_reason = #{refundReason}
		WHERE payment_key = #{paymentKey}
	</update>

	<insert id ="insertUserTbPoint">
		UPDATE user_de_tb 
		SET point = #{balance} + #{pay2}
		WHERE user_id = #{userId}    
		
	</insert>
	
	<insert id="deleteUserTbPoint">
		UPDATE user_de_tb 
		SET point = #{balance} - #{refundAmount}
		WHERE user_id = #{userId}    
	</insert>
	
	<select id="findPayList" resultType="com.jam.repository.model.AccountHistoryDTO">
		 SELECT * 
    FROM account_history_tb
    WHERE user_id = #{userId}
    <!-- order by created_at desc;  -->
	</select>

	<select id="findRefundList" resultType="com.jam.dto.RefundRequest">
		insert into refund_request_tb (user_id, payment_key, refund_amount, refund_reason, point, method)
		values(#{userId}, #{paymentKey}, #{refundAmount}, #{refundReason}, #{point}, #{method});
		
	</select>

	
	<select id="selectRefundRequest" resultType="com.jam.repository.model.RefundRequest">
		SELECT refund.*, u.email 
		FROM refund_request_tb refund 
		JOIN user_tb u ON u.user_id = refund.user_id
		LIMIT #{pageSize} OFFSET #{offset}
	</select>
	
	<update id="pointAudit">
	 update refund_request_tb
    set staff_id = #{userId}, status = '승인', approved_at = CURRENT_TIMESTAMP
    where payment_key = #{paymentKey}
	</update>
	
	<update id="pointreject">
	  update refund_request_tb
    set staff_id = #{userId}, status = '거절', approved_at = CURRENT_TIMESTAMP
    where payment_key = #{paymentKey}
	</update>
	
	<update id="pointAuditWait" >
	 update account_history_tb
    set status = '심사중'
    where payment_key = #{paymentKey}
	</update>
	
	
	<update id="updateStatus1">
		update account_history_tb
		set status = '승인'
		where payment_key = #{paymentKey}
	</update>
	
	<update id="updateStatus2">
		update account_history_tb
		set status = '거절'
		where payment_key = #{paymentKey}
	</update>
	
	<select id="historyPaymentKeyCheck" resultType="int">
		select count(*)
		from refund_request_tb
		where payment_key = #{paymentKey}
		
	</select>
	
	<insert id="InsertPaymentTB">
		INSERT INTO payment_tb(user_id, payment_key, price, point, event)
		VALUES (#{userId}, #{paymentKey}, #{price}, #{point}, #{event});
	</insert>

	<select id="findPayDetailByRefundId" resultType="com.jam.repository.model.RefundRequest">
		SELECT refund.*, u.email FROM refund_request_tb refund JOIN user_tb u ON u.user_id = refund.user_id where refund_id = #{refundId}
	</select>

	<select id="getTotalRefundRequestCount" resultType="int">
		SELECT COUNT(*) FROM refund_request_tb
	</select>

</mapper>
